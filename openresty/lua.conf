
#lua.conf 
#在ngx_lua模块中使用共享内存字典项相关API的前提条件是已经使用lua_shared_dict命令定义了一个字典项对象，该命令的具体用法为：
#语法：lua_shared_dict <name> <size>
#该命令主要是定义一块名为name的共享内存空间，内存大小为size。通过该命令定义的共享内存对象对于Nginx中所有worker进程都是可见的，当Nginx通过reload命令重启时，共享内存字典项会从新获取它的内容，当时当Nginx退出时，字典项的值将会丢失。下面是一个具体的例子：
lua_shared_dict url_limit 10m; 
server {  
    listen       80;  
    server_name  _;  
    location /lua {  
        default_type 'text/html'; 
        lua_code_cache on;  
        content_by_lua_file conf/lua/test.lua;   
    } 
    location /lua1 {
        default_type 'text/html';
        lua_code_cache on;
            content_by_lua_file conf/lua/test1.lua;
    }
    location ~ /promotion/(\d+)
    {
        set $id $1;
        default_type "text/html";
        content_by_lua_file conf/lua/1.lua;
    } 
    root   html/;
    location / {
       if (!-e $request_filename) {
           rewrite  ^(.*)$  /index.php?s=$1  last;
           break;
       }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  /$document_root$fastcgi_script_name;
        include        fastcgi_params;
    }
}
   
